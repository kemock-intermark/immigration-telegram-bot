#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º, —Ç–µ–≥–∞–º, —Ç–∏–ø–∞–º –ø—Ä–æ–≥—Ä–∞–º–º –∏ –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
"""

import sys
import re
from pathlib import Path
from typing import List, Dict


class KnowledgeSearcher:
    def __init__(self, knowledge_dir: str):
        self.knowledge_dir = Path(knowledge_dir)
        
    def extract_metadata(self, md_path: Path) -> Dict:
        """–ò–∑–≤–ª–µ—á—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ Markdown —Ñ–∞–π–ª–∞"""
        try:
            with open(md_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ò—â–µ–º YAML frontmatter
            match = re.match(r'^---\s*\n(.*?)\n---\s*\n(.*)$', content, re.DOTALL)
            if not match:
                return {}
            
            yaml_content = match.group(1)
            body_content = match.group(2)
            
            # –ü–∞—Ä—Å–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = {'body': body_content}
            for line in yaml_content.split('\n'):
                if ':' in line and not line.strip().startswith('-'):
                    key, value = line.split(':', 1)
                    key = key.strip()
                    value = value.strip().strip('"\'')
                    metadata[key] = value
            
            return metadata
        except Exception as e:
            return {}
    
    def search_by_country(self, country: str) -> List[Path]:
        """–ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–∞–Ω–µ"""
        results = []
        country_lower = country.lower()
        
        for md_file in self.knowledge_dir.rglob("*.md"):
            if md_file.name in ['00_index.md', 'build_log.md', 'update_log.md']:
                continue
            
            metadata = self.extract_metadata(md_file)
            file_country = metadata.get('category', '').lower()
            
            if country_lower in file_country:
                results.append(md_file)
        
        return results
    
    def search_by_type(self, program_type: str) -> List[Path]:
        """–ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        results = []
        type_map = {
            'citizenship': 'citizenship',
            '–≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ': 'citizenship',
            'residence': 'residence-permit',
            '–≤–∏–¥': 'residence-permit',
            'permanent': 'permanent-residence',
            '–ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ': 'permanent-residence',
            'passport': 'passport',
            '–ø–∞—Å–ø–æ—Ä—Ç': 'passport'
        }
        
        search_type = type_map.get(program_type.lower(), program_type.lower())
        
        for md_file in self.knowledge_dir.rglob("*.md"):
            if md_file.name in ['00_index.md', 'build_log.md', 'update_log.md']:
                continue
            
            metadata = self.extract_metadata(md_file)
            file_type = metadata.get('subcategory', '').lower()
            
            if search_type in file_type:
                results.append(md_file)
        
        return results
    
    def search_fulltext(self, query: str) -> List[tuple]:
        """–ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫"""
        results = []
        query_lower = query.lower()
        
        for md_file in self.knowledge_dir.rglob("*.md"):
            if md_file.name in ['00_index.md', 'build_log.md', 'update_log.md']:
                continue
            
            metadata = self.extract_metadata(md_file)
            body = metadata.get('body', '').lower()
            
            if query_lower in body:
                # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                body_lower = metadata.get('body', '').lower()
                index = body_lower.find(query_lower)
                start = max(0, index - 100)
                end = min(len(body), index + len(query) + 100)
                context = metadata.get('body', '')[start:end].strip()
                
                results.append((md_file, context))
        
        return results
    
    def print_results(self, results, query_type=""):
        """–í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞"""
        if not results:
            print(f"\n‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query_type}")
            return
        
        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
        print("=" * 80)
        
        for i, item in enumerate(results, 1):
            if isinstance(item, tuple):
                md_file, context = item
                metadata = self.extract_metadata(md_file)
                print(f"\n{i}. {metadata.get('title', md_file.name)}")
                print(f"   üìÅ {md_file.relative_to(self.knowledge_dir)}")
                print(f"   üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {metadata.get('category', 'N/A')}")
                print(f"   üîç –ö–æ–Ω—Ç–µ–∫—Å—Ç: ...{context}...")
            else:
                md_file = item
                metadata = self.extract_metadata(md_file)
                print(f"\n{i}. {metadata.get('title', md_file.name)}")
                print(f"   üìÅ {md_file.relative_to(self.knowledge_dir)}")
                print(f"   üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {metadata.get('category', 'N/A')}")
                print(f"   üìå –¢–∏–ø: {metadata.get('subcategory', 'N/A')}")
                print(f"   üí¨ {metadata.get('summary', 'N/A')[:150]}...")


def main():
    base_dir = Path(__file__).parent
    knowledge_dir = base_dir / "knowledge"
    
    if not knowledge_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ knowledge/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ build_knowledge.py")
        sys.exit(1)
    
    searcher = KnowledgeSearcher(knowledge_dir)
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    if len(sys.argv) == 1:
        print("üîç –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")
        print("=" * 80)
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:")
        print("1. –ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–∞–Ω–µ")
        print("2. –ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        print("3. –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫")
        print("0. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (0-3): ").strip()
        
        if choice == "1":
            country = input("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É: ").strip()
            results = searcher.search_by_country(country)
            searcher.print_results(results, f"—Å—Ç—Ä–∞–Ω–∞: {country}")
        elif choice == "2":
            ptype = input("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø (citizenship/residence/permanent/passport): ").strip()
            results = searcher.search_by_type(ptype)
            searcher.print_results(results, f"—Ç–∏–ø: {ptype}")
        elif choice == "3":
            query = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ").strip()
            results = searcher.search_fulltext(query)
            searcher.print_results(results, f"—Ç–µ–∫—Å—Ç: {query}")
    
    # –†–µ–∂–∏–º –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    else:
        if sys.argv[1] == "--country":
            results = searcher.search_by_country(sys.argv[2])
            searcher.print_results(results, f"—Å—Ç—Ä–∞–Ω–∞: {sys.argv[2]}")
        elif sys.argv[1] == "--type":
            results = searcher.search_by_type(sys.argv[2])
            searcher.print_results(results, f"—Ç–∏–ø: {sys.argv[2]}")
        elif sys.argv[1] == "--search":
            results = searcher.search_fulltext(sys.argv[2])
            searcher.print_results(results, f"—Ç–µ–∫—Å—Ç: {sys.argv[2]}")
        else:
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
            print("  python3 search_knowledge.py --country <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
            print("  python3 search_knowledge.py --type <—Ç–∏–ø>")
            print("  python3 search_knowledge.py --search <–∑–∞–ø—Ä–æ—Å>")


if __name__ == "__main__":
    main()

