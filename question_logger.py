#!/usr/bin/env python3
"""
–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ Telegram —Å –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ Git
"""

import json
import os
import subprocess
from pathlib import Path
from datetime import datetime
from typing import Optional
import threading
import time


class QuestionLogger:
    def __init__(self, log_dir: str):
        self.log_dir = Path(log_dir)
        self.log_dir.mkdir(exist_ok=True)
        
        # –§–∞–π–ª –ª–æ–≥–æ–≤ (JSON Lines —Ñ–æ—Ä–º–∞—Ç)
        self.log_file = self.log_dir / "telegram_questions.jsonl"
        
        # –°—á—ë—Ç—á–∏–∫ –¥–ª—è –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.questions_since_sync = 0
        self.sync_threshold = 10  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤
        self.last_sync_time = time.time()
        self.sync_interval = 3600  # –ò–ª–∏ –∫–∞–∂–¥—ã–π —á–∞—Å (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        
        # Lock –¥–ª—è thread-safety
        self.lock = threading.Lock()
        
        print(f"üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤: {self.log_file}")
    
    def log_question(
        self,
        user_id: int,
        username: Optional[str],
        question: str,
        answer_found: bool,
        response_length: int = 0,
        lang: Optional[str] = None
    ):
        """–ó–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —è–∑—ã–∫–∞"""
        with self.lock:
            try:
                # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å
                log_entry = {
                    "timestamp": datetime.now().isoformat(),
                    "user_id": user_id,
                    "username": username or "anonymous",
                    "question": question,
                    "answer_found": answer_found,
                    "response_length": response_length,
                    "lang": lang or "unknown",  # –Ø–∑—ã–∫ –∑–∞–ø—Ä–æ—Å–∞
                    "date": datetime.now().strftime("%Y-%m-%d"),
                    "time": datetime.now().strftime("%H:%M:%S")
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ñ–∞–π–ª (JSON Lines - –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ = JSON –æ–±—ä–µ–∫—Ç)
                with open(self.log_file, 'a', encoding='utf-8') as f:
                    f.write(json.dumps(log_entry, ensure_ascii=False) + '\n')
                
                self.questions_since_sync += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
                self._check_and_sync()
                
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞: {e}")
    
    def _check_and_sync(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏ —Å Git"""
        current_time = time.time()
        time_since_sync = current_time - self.last_sync_time
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –µ—Å–ª–∏:
        # 1. –ù–∞–∫–æ–ø–∏–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –ò–õ–ò
        # 2. –ü—Ä–æ—à—ë–ª —á–∞—Å —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        should_sync = (
            self.questions_since_sync >= self.sync_threshold or
            time_since_sync >= self.sync_interval
        )
        
        if should_sync:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
            threading.Thread(target=self._sync_to_git, daemon=True).start()
            self.questions_since_sync = 0
            self.last_sync_time = current_time
    
    def _sync_to_git(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏ —Å Git"""
        try:
            print("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–≥–æ–≤ —Å Git...")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
            project_dir = self.log_dir.parent
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –≤ Git
            subprocess.run(
                ['git', 'add', str(self.log_file.relative_to(project_dir))],
                cwd=project_dir,
                capture_output=True,
                timeout=10
            )
            
            # –ö–æ–º–º–∏—Ç–∏–º
            commit_msg = f"üìä Auto-sync: Telegram questions log ({datetime.now().strftime('%Y-%m-%d %H:%M')})"
            result = subprocess.run(
                ['git', 'commit', '-m', commit_msg],
                cwd=project_dir,
                capture_output=True,
                timeout=10
            )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è - –ø—É—à–∏–º
            if result.returncode == 0:
                subprocess.run(
                    ['git', 'push'],
                    cwd=project_dir,
                    capture_output=True,
                    timeout=30
                )
                print("‚úÖ –õ–æ–≥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å Git")
            else:
                # –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–ª–∏ –æ—à–∏–±–∫–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                pass
                
        except subprocess.TimeoutExpired:
            print("‚ö†Ô∏è  –¢–∞–π–º–∞—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Git (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Git: {e}")
    
    def get_stats(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ª–æ–≥–∞–º"""
        try:
            if not self.log_file.exists():
                return {"total_questions": 0}
            
            with open(self.log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            total = len(lines)
            answered = sum(1 for line in lines if json.loads(line).get('answer_found', False))
            
            # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            users = set()
            for line in lines:
                entry = json.loads(line)
                users.add(entry.get('user_id'))
            
            return {
                "total_questions": total,
                "answered": answered,
                "not_answered": total - answered,
                "unique_users": len(users)
            }
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {"error": str(e)}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞ (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ)
_logger_instance = None


def get_logger(log_dir: str = None):
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞"""
    global _logger_instance
    if _logger_instance is None and log_dir:
        _logger_instance = QuestionLogger(log_dir)
    return _logger_instance

