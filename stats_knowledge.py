#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö, –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
"""

import re
from pathlib import Path
from typing import Dict, List
from collections import Counter


class KnowledgeStats:
    def __init__(self, knowledge_dir: str):
        self.knowledge_dir = Path(knowledge_dir)
        self.documents = []
        
    def extract_metadata(self, md_path: Path) -> Dict:
        """–ò–∑–≤–ª–µ—á—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ Markdown —Ñ–∞–π–ª–∞"""
        try:
            with open(md_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            match = re.match(r'^---\s*\n(.*?)\n---\s*\n(.*)$', content, re.DOTALL)
            if not match:
                return {}
            
            yaml_content = match.group(1)
            body_content = match.group(2)
            
            metadata = {'body': body_content, 'file_path': md_path}
            for line in yaml_content.split('\n'):
                if ':' in line and not line.strip().startswith('-'):
                    key, value = line.split(':', 1)
                    key = key.strip()
                    value = value.strip().strip('"\'')
                    metadata[key] = value
            
            return metadata
        except Exception as e:
            return {}
    
    def collect_all_documents(self):
        """–°–æ–±—Ä–∞—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
        for md_file in self.knowledge_dir.rglob("*.md"):
            if md_file.name in ['00_index.md', 'build_log.md', 'update_log.md']:
                continue
            
            metadata = self.extract_metadata(md_file)
            if metadata:
                self.documents.append(metadata)
    
    def get_summary(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("\n" + "=" * 80)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô")
        print("=" * 80)
        
        total_docs = len(self.documents)
        print(f"\nüìö –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {total_docs}")
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å—Ç—Ä–∞–Ω—ã)
        categories = Counter([doc.get('category', 'Unknown') for doc in self.documents])
        print(f"üåç –ö–∞—Ç–µ–≥–æ—Ä–∏–π (—Å—Ç—Ä–∞–Ω): {len(categories)}")
        
        # –¢–∏–ø—ã –ø—Ä–æ–≥—Ä–∞–º–º
        subcategories = Counter([doc.get('subcategory', 'Unknown') for doc in self.documents])
        
        print("\n" + "-" * 80)
        print("üìã –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –¢–ò–ü–ê–ú –ü–†–û–ì–†–ê–ú–ú:")
        print("-" * 80)
        
        type_names = {
            'citizenship': '–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ',
            'residence-permit': '–í–∏–¥ –Ω–∞ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
            'permanent-residence': '–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ',
            'passport': '–ü–∞—Å–ø–æ—Ä—Ç',
            'golden-visa': '–ó–æ–ª–æ—Ç–∞—è –≤–∏–∑–∞',
            'general': '–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
        }
        
        for subcat, count in subcategories.most_common():
            name = type_names.get(subcat, subcat)
            print(f"  ‚Ä¢ {name}: {count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        print("\n" + "-" * 80)
        print("üåç –¢–û–ü-10 –°–¢–†–ê–ù –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –î–û–ö–£–ú–ï–ù–¢–û–í:")
        print("-" * 80)
        
        for country, count in categories.most_common(10):
            print(f"  {count:2d}. {country}")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –æ–±—ä—ë–º
        total_chars = sum(len(doc.get('body', '')) for doc in self.documents)
        total_words = sum(len(doc.get('body', '').split()) for doc in self.documents)
        
        print("\n" + "-" * 80)
        print("üìè –û–ë–™–Å–ú –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô:")
        print("-" * 80)
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {total_chars:,}")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ —Å–ª–æ–≤: {total_words:,}")
        print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —Å–ª–æ–≤ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç: {total_words // total_docs if total_docs > 0 else 0:,}")
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏
        sources = set()
        for doc in self.documents:
            body = doc.get('body', '')
            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            matches = re.findall(r'raw/([^\s‚Üí]+\.pdf)', body)
            sources.update(matches)
        
        print(f"\nüìÑ –ò—Å—Ö–æ–¥–Ω—ã—Ö PDF —Ñ–∞–π–ª–æ–≤: {len(sources)}")
        
        print("\n" + "=" * 80)
    
    def get_detailed_by_country(self, country: str):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–µ"""
        country_docs = [doc for doc in self.documents 
                       if country.lower() in doc.get('category', '').lower()]
        
        if not country_docs:
            print(f"\n‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω—ã '{country}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"\n" + "=" * 80)
        print(f"üåç –°–¢–ê–¢–ò–°–¢–ò–ö–ê: {country.upper()}")
        print("=" * 80)
        print(f"\nüìö –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(country_docs)}")
        
        print("\nüìã –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
        for i, doc in enumerate(country_docs, 1):
            print(f"\n  {i}. {doc.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            print(f"     –¢–∏–ø: {doc.get('subcategory', 'N/A')}")
            print(f"     –§–∞–π–ª: {doc.get('file_path').relative_to(self.knowledge_dir)}")
            print(f"     –í–µ—Ä—Å–∏—è: {doc.get('version', 'N/A')}")
            print(f"     –î–∞—Ç–∞: {doc.get('extraction_date', 'N/A')}")
    
    def list_all_countries(self):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω"""
        categories = sorted(set([doc.get('category', 'Unknown') for doc in self.documents]))
        
        print("\n" + "=" * 80)
        print("üåç –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –°–¢–†–ê–ù –í –ë–ê–ó–ï –ó–ù–ê–ù–ò–ô")
        print("=" * 80)
        print(f"\n–í—Å–µ–≥–æ: {len(categories)} —Å—Ç—Ä–∞–Ω/—Ä–µ–≥–∏–æ–Ω–æ–≤\n")
        
        for i, country in enumerate(categories, 1):
            count = sum(1 for doc in self.documents if doc.get('category') == country)
            print(f"  {i:2d}. {country} ({count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)")


def main():
    import sys
    
    base_dir = Path(__file__).parent
    knowledge_dir = base_dir / "knowledge"
    
    if not knowledge_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ knowledge/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ build_knowledge.py")
        sys.exit(1)
    
    stats = KnowledgeStats(knowledge_dir)
    stats.collect_all_documents()
    
    # –†–µ–∂–∏–º –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        if sys.argv[1] == "--country":
            if len(sys.argv) > 2:
                stats.get_detailed_by_country(sys.argv[2])
            else:
                print("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã")
        elif sys.argv[1] == "--list":
            stats.list_all_countries()
        else:
            stats.get_summary()
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        stats.get_summary()
        
        print("\n" + "=" * 80)
        print("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  python3 stats_knowledge.py --list          # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω")
        print("  python3 stats_knowledge.py --country <–Ω–∞–∑–≤–∞–Ω–∏–µ>  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–µ")
        print("=" * 80)


if __name__ == "__main__":
    main()

