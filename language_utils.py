#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ —Ä–∞–±–æ—Ç—ã —Å —è–∑—ã–∫–∞–º–∏ –≤ –¥–≤—É—è–∑—ã—á–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
"""

import re
from typing import Literal, Optional
from pathlib import Path

Language = Literal["rus", "eng"]

class LanguageDetector:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ —è–∑—ã–∫–æ–≤—ã–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º"""
    
    @staticmethod
    def detect_from_text(text: str, threshold: float = 0.30) -> Language:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            threshold: –ü–æ—Ä–æ–≥ –¥–æ–ª–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–∫ rus (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30%)
        
        Returns:
            "rus" –µ—Å–ª–∏ –¥–æ–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã >= threshold, –∏–Ω–∞—á–µ "eng"
        """
        if not text:
            return "eng"
        
        # –°—á–∏—Ç–∞–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
        cyrillic_pattern = re.compile(r'[–∞-—è–ê-–Ø—ë–Å]')
        total_letters = len(re.findall(r'[a-zA-Z–∞-—è–ê-–Ø—ë–Å]', text))
        
        if total_letters == 0:
            return "eng"
        
        cyrillic_count = len(cyrillic_pattern.findall(text))
        cyrillic_ratio = cyrillic_count / total_letters
        
        return "rus" if cyrillic_ratio >= threshold else "eng"
    
    @staticmethod
    def detect_from_query(query: str) -> Language:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        –ü—Ä–∞–≤–∏–ª–æ: –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 1 –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π —Å–∏–º–≤–æ–ª ‚Üí rus, –∏–Ω–∞—á–µ eng
        
        Args:
            query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            "rus" –∏–ª–∏ "eng"
        """
        cyrillic_pattern = re.compile(r'[–∞-—è–ê-–Ø—ë–Å]')
        return "rus" if cyrillic_pattern.search(query) else "eng"
    
    @staticmethod
    def get_source_language(source_path: Path) -> Language:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ –µ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é
        
        –ü—Ä–∞–≤–∏–ª–∞:
        - raw/rus/* ‚Üí rus
        - raw/eng/* ‚Üí eng
        - raw/* (legacy) ‚Üí –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        
        Args:
            source_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        
        Returns:
            "rus" –∏–ª–∏ "eng", –∏–ª–∏ None –¥–ª—è legacy —Ñ–∞–π–ª–æ–≤
        """
        parts = source_path.parts
        
        if 'raw' in parts:
            raw_index = parts.index('raw')
            if raw_index + 1 < len(parts):
                next_part = parts[raw_index + 1]
                if next_part == 'rus':
                    return "rus"
                elif next_part == 'eng':
                    return "eng"
        
        return None  # Legacy - —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É


class LanguageRouter:
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫ —è–∑—ã–∫–æ–≤—ã–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º"""
    
    def __init__(self, knowledge_dir: Path):
        self.knowledge_dir = Path(knowledge_dir)
    
    def get_docs_dir(self, lang: Language) -> Path:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —è–∑—ã–∫–∞"""
        return self.knowledge_dir / lang
    
    def get_manifest_path(self, lang: Language) -> Path:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ manifest –¥–ª—è —è–∑—ã–∫–∞"""
        return self.knowledge_dir / f"manifest.{lang}.json"
    
    def get_index_path(self, lang: Language) -> Path:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ 00_index –¥–ª—è —è–∑—ã–∫–∞"""
        return self.knowledge_dir / f"00_index.{lang}.md"
    
    def get_kw_index_path(self, lang: Language) -> Path:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –∏–Ω–¥–µ–∫—Å—É –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —è–∑—ã–∫–∞"""
        return self.knowledge_dir / f"kw_index.{lang}.jsonl"
    
    def get_emb_index_pattern(self, lang: Language) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
        return str(self.knowledge_dir / f"emb_index.{lang}.*")
    
    def get_chunks_index_path(self, lang: Language) -> Path:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –∏–Ω–¥–µ–∫—Å—É —á–∞–Ω–∫–æ–≤"""
        return self.knowledge_dir / f"chunks.{lang}.idx"
    
    def ensure_structure(self):
        """–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –¥–≤—É—è–∑—ã—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        # –°–æ–∑–¥–∞–µ–º —è–∑—ã–∫–æ–≤—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        for lang in ["rus", "eng"]:
            (self.knowledge_dir / lang).mkdir(exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        raw_dir = self.knowledge_dir.parent / 'raw'
        (raw_dir / 'rus').mkdir(parents=True, exist_ok=True)
        (raw_dir / 'eng').mkdir(parents=True, exist_ok=True)
        
        print("‚úÖ –î–≤—É—è–∑—ã—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω–∞")


def format_source_attribution(source_file: str, lang: Language, 
                              slides_start: int, slides_end: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—Ç—Ä–∏–±—É—Ü–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞
    
    Args:
        source_file: –ò–º—è —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        lang: –Ø–∑—ã–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        slides_start: –ù–∞—á–∞–ª—å–Ω—ã–π —Å–ª–∞–π–¥
        slides_end: –ö–æ–Ω–µ—á–Ω—ã–π —Å–ª–∞–π–¥
    
    Returns:
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∞—Ç—Ä–∏–±—É—Ü–∏–∏
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
    if source_file.startswith('raw/'):
        # –£–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É—Ç—å
        path = source_file
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫ –≤ –ø—É—Ç—å
        path = f"raw/{lang}/{source_file}"
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ—Ä–º–∏–Ω –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    pages_term = "—Å–ª–∞–π–¥—ã" if lang == "rus" else "slides"
    
    return f"{path} ‚Üí {pages_term} {slides_start}‚Äì{slides_end}"


if __name__ == "__main__":
    # –¢–µ—Å—Ç—ã
    detector = LanguageDetector()
    
    tests = [
        ("–ö–∞–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∫–∞—Ä–∏–±—Å–∫–∏—Ö –ø–∞—Å–ø–æ—Ä—Ç–æ–≤?", "rus"),
        ("Caribbean citizenship programs", "eng"),
        ("Portugal golden visa", "eng"),
        ("–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç Golden Visa?", "rus"),
        ("Malta citizenship requirements", "eng"),
        ("123456", "eng"),  # –ù–µ—Ç –±—É–∫–≤
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞:\n")
    for query, expected in tests:
        detected = detector.detect_from_query(query)
        status = "‚úì" if detected == expected else "‚úó"
        print(f"{status} '{query}' ‚Üí {detected} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected})")

