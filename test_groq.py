#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Groq API
"""

import os
import sys

def test_groq():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º Groq API"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Groq API...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    api_key = os.getenv('GROQ_API_KEY')
    if not api_key:
        print("‚ùå GROQ_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...")
    
    try:
        from groq import Groq
        client = Groq(api_key=api_key)
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
        print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
        response = client.chat.completions.create(
            model="llama-3.3-70b-versatile",
            messages=[{"role": "user", "content": "Say 'Hello, test successful!'"}],
            max_tokens=20,
            temperature=0.1
        )
        
        result = response.choices[0].message.content
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç: {result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if hasattr(response, 'usage'):
            usage = response.usage
            print(f"üìä –¢–æ–∫–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã: {usage.total_tokens}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Groq: {e}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        error_str = str(e).lower()
        if "rate limit" in error_str or "429" in error_str:
            print("üö´ Rate limit - –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å")
        elif "unauthorized" in error_str or "401" in error_str:
            print("üîë –ü—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º")
        elif "model" in error_str:
            print("ü§ñ –ü—Ä–æ–±–ª–µ–º–∞ —Å –º–æ–¥–µ–ª—å—é")
        else:
            print("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        
        return False

def test_multi_provider():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –º—É–ª—å—Ç–∏–ø—Ä–æ–≤–∞–π–¥–µ—Ä–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É–ª—å—Ç–∏–ø—Ä–æ–≤–∞–π–¥–µ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        from llm_providers import multi_llm, get_llm_status
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        status = get_llm_status()
        print("üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:")
        for name, info in status.items():
            configured = "‚úÖ" if info['configured'] else "‚ùå"
            available = "üü¢" if info['available'] else "üî¥"
            print(f"  {name}: {configured} {available}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
        available_providers = multi_llm.get_available_providers()
        print(f"\nüîç –î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {len(available_providers)}")
        
        if len(available_providers) > 0:
            print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞...")
            response = multi_llm.generate_response(
                "You are a helpful assistant.",
                "Say 'Multi-provider test successful!'",
                max_retries=1
            )
            
            if response.error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –º—É–ª—å—Ç–∏–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {response.error}")
            else:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {response.provider}: {response.content[:50]}...")
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º—É–ª—å—Ç–∏–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {e}")
        return False

if __name__ == "__main__":
    print("=" * 60)
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê LLM –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    # –¢–µ—Å—Ç Groq
    groq_ok = test_groq()
    
    # –¢–µ—Å—Ç –º—É–ª—å—Ç–∏–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    multi_ok = test_multi_provider()
    
    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–ò:")
    print(f"Groq API: {'‚úÖ OK' if groq_ok else '‚ùå FAIL'}")
    print(f"–ú—É–ª—å—Ç–∏–ø—Ä–æ–≤–∞–π–¥–µ—Ä: {'‚úÖ OK' if multi_ok else '‚ùå FAIL'}")
    
    if groq_ok and multi_ok:
        print("üéâ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç!")
        sys.exit(0)
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
        sys.exit(1)
