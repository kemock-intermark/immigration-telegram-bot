#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–≤—É—è–∑—ã—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import sys
from pathlib import Path
from language_utils import LanguageDetector, LanguageRouter
from chat_agent import KnowledgeAgent

def test_language_detection():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("="*60)
    
    detector = LanguageDetector()
    
    test_cases = [
        ("–ö–∞–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∫–∞—Ä–∏–±—Å–∫–∏—Ö –ø–∞—Å–ø–æ—Ä—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—Ç?", "rus"),
        ("Caribbean citizenship programs", "eng"),
        ("–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π –í–ù–ñ?", "rus"),
        ("Portugal golden visa cost", "eng"),
        ("–¢—É—Ä–µ—Ü–∫–æ–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –∑–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "rus"),
        ("Malta citizenship requirements", "eng"),
    ]
    
    passed = 0
    for query, expected in test_cases:
        detected = detector.detect_from_query(query)
        status = "‚úÖ" if detected == expected else "‚ùå"
        if detected == expected:
            passed += 1
        print(f"{status} '{query}' ‚Üí {detected} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected})")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(test_cases)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    return passed == len(test_cases)


def test_routing():
    """–¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 2: –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫ —è–∑—ã–∫–æ–≤—ã–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º")
    print("="*60)
    
    knowledge_dir = Path("knowledge")
    router = LanguageRouter(knowledge_dir)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç–∏
    rus_paths = {
        "docs": router.get_docs_dir("rus"),
        "manifest": router.get_manifest_path("rus")
    }
    
    eng_paths = {
        "docs": router.get_docs_dir("eng"),
        "manifest": router.get_manifest_path("eng")
    }
    
    print("\nüá∑üá∫ –†—É—Å—Å–∫–∏–µ –ø—É—Ç–∏:")
    for name, path in rus_paths.items():
        exists = "‚úÖ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" if path.exists() else "‚ö†Ô∏è  –Ω–µ –Ω–∞–π–¥–µ–Ω"
        print(f"  {name}: {path} {exists}")
    
    print("\nüá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø—É—Ç–∏:")
    for name, path in eng_paths.items():
        exists = "‚úÖ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" if path.exists() else "‚ö†Ô∏è  –Ω–µ –Ω–∞–π–¥–µ–Ω"
        print(f"  {name}: {path} {exists}")
    
    return True


def test_agent_initialization():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤")
    print("="*60)
    
    knowledge_dir = "knowledge"
    
    try:
        print("\nüìö –°–æ–∑–¥–∞–Ω–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞...")
        agent_rus = KnowledgeAgent(knowledge_dir, lang="rus")
        print(f"  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(agent_rus.documents)} —Ä—É—Å—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        print(f"  üì¶ –í–µ—Ä—Å–∏—è: {agent_rus.kb_version}")
        
        print("\nüìö –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞...")
        agent_eng = KnowledgeAgent(knowledge_dir, lang="eng")
        print(f"  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(agent_eng.documents)} –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        print(f"  üì¶ –í–µ—Ä—Å–∏—è: {agent_eng.kb_version}")
        
        print("\nüìö –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ (–æ–±–∞ —è–∑—ã–∫–∞)...")
        agent_all = KnowledgeAgent(knowledge_dir, lang=None)
        print(f"  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(agent_all.documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–≤—Å–µ–≥–æ)")
        
        return True
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_search():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 4: –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —è–∑—ã–∫–∞–º")
    print("="*60)
    
    knowledge_dir = "knowledge"
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤
        agent_rus = KnowledgeAgent(knowledge_dir, lang="rus")
        agent_eng = KnowledgeAgent(knowledge_dir, lang="eng")
        
        test_queries = [
            ("rus", agent_rus, "–ö–∞–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∫–∞—Ä–∏–±—Å–∫–∏—Ö –ø–∞—Å–ø–æ—Ä—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—Ç?"),
            ("eng", agent_eng, "Caribbean citizenship programs"),
            ("rus", agent_rus, "–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π –∑–æ–ª–æ—Ç–æ–π –≤–∏–∑"),
            ("eng", agent_eng, "Portugal golden visa"),
        ]
        
        for lang, agent, query in test_queries:
            print(f"\nüîç [{lang.upper()}] '{query}'")
            results = agent.search_documents(query, limit=3)
            
            if results:
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
                for i, (doc, score) in enumerate(results[:3], 1):
                    doc_lang = doc.get('lang', '?')
                    print(f"    {i}. [{doc_lang.upper()}] {doc['title']} (score: {score:.2f})")
            else:
                print(f"  ‚ö†Ô∏è  –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        return True
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_answer_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ LLM")
    print("="*60)
    
    knowledge_dir = "knowledge"
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ GROQ_API_KEY
        import os
        if not os.getenv("GROQ_API_KEY"):
            print("  ‚ö†Ô∏è  GROQ_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ LLM")
            return True
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        agent_rus = KnowledgeAgent(knowledge_dir, lang="rus")
        
        query = "–ö–∞–∫–∏–µ –µ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –∫–∞—Ä–∏–±—Å–∫–∏—Ö –ø–∞—Å–ø–æ—Ä—Ç–æ–≤?"
        print(f"\nüîç –í–æ–ø—Ä–æ—Å: {query}")
        
        answer = agent_rus.ask(query)
        print(f"\nüí¨ –û—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤):\n{answer[:300]}...")
        
        return True
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("\n" + "="*60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–í–£–Ø–ó–´–ß–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print("="*60)
    
    tests = [
        ("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞", test_language_detection),
        ("–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è", test_routing),
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤", test_agent_initialization),
        ("–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", test_search),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤", test_answer_generation),
    ]
    
    results = []
    for name, test_func in tests:
        try:
            result = test_func()
            results.append((name, result))
        except Exception as e:
            print(f"\n‚ùå –¢–µ—Å—Ç '{name}' –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
            import traceback
            traceback.print_exc()
            results.append((name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("="*60)
    
    for name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status}: {name}")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    print("\n" + "="*60)
    print(f"–¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print("="*60)
    
    return passed == total


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

